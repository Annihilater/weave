basePath: /
definitions:
  common.Response:
    properties:
      code:
        type: integer
      data: {}
      msg:
        type: string
    type: object
  model.AuthUser:
    properties:
      name:
        type: string
      password:
        type: string
    type: object
  model.CreatedUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  model.JWTToken:
    properties:
      describe:
        type: string
      token:
        type: string
    type: object
  model.UpdatedUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  model.User:
    properties:
      create_time:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      update_time:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a weave server api doc.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Weave Server API
  version: "2.0"
paths:
  /:
    get:
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Index
      tags:
      - index
  /api/v1/users:
    get:
      description: List user and storage
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
      security:
      - JWT: []
      summary: List user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create user and storage
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreatedUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
      security:
      - JWT: []
      summary: Create user
      tags:
      - user
  /api/v1/users/{id}:
    delete:
      description: Delete user and storage
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Response'
      security:
      - JWT: []
      summary: Delete user
      tags:
      - user
    get:
      description: Get user and storage
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
      security:
      - JWT: []
      summary: Get user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user and storage
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UpdatedUser'
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
      security:
      - JWT: []
      summary: Update user
      tags:
      - user
  /healthz:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthz
      tags:
      - healthz
  /login:
    post:
      consumes:
      - application/json
      description: Create user and storage
      parameters:
      - description: auth user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.AuthUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.JWTToken'
              type: object
      summary: Login
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Create user and storage
      parameters:
      - description: user info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.CreatedUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
      summary: Register user
      tags:
      - auth
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
